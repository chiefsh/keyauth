// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package user

import (
	"bytes"
	"fmt"
	"strings"
)

var (
	enumGenderShowMap = map[Gender]string{
		Unknown: "unknown",
		Male:    "male",
		Female:  "female",
	}

	enumGenderIDMap = map[string]Gender{
		"unknown": Unknown,
		"male":    Male,
		"female":  Female,
	}
)

// ParseGender Parse Gender from string
func ParseGender(str string) (Gender, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := enumGenderIDMap[key]
	if !ok {
		return 0, fmt.Errorf("unknown Status: %s", str)
	}

	return v, nil
}

// Is todo
func (t Gender) Is(target Gender) bool {
	return t == target
}

// String stringer
func (t Gender) String() string {
	v, ok := enumGenderShowMap[t]
	if !ok {
		return "unknown"
	}

	return v
}

// MarshalJSON todo
func (t Gender) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(t.String())
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *Gender) UnmarshalJSON(b []byte) error {
	ins, err := ParseGender(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

var (
	enumCreateTypeShowMap = map[CreateType]string{
		DomainAdmin:  "domain_admin",
		LDAPSync:     "ldap_sync",
		UserRegistry: "user_registry",
	}

	enumCreateTypeIDMap = map[string]CreateType{
		"domain_admin":  DomainAdmin,
		"ldap_sync":     LDAPSync,
		"user_registry": UserRegistry,
	}
)

// ParseCreateType Parse CreateType from string
func ParseCreateType(str string) (CreateType, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := enumCreateTypeIDMap[key]
	if !ok {
		return 0, fmt.Errorf("unknown Status: %s", str)
	}

	return v, nil
}

// Is todo
func (t CreateType) Is(target CreateType) bool {
	return t == target
}

// String stringer
func (t CreateType) String() string {
	v, ok := enumCreateTypeShowMap[t]
	if !ok {
		return "unknown"
	}

	return v
}

// MarshalJSON todo
func (t CreateType) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(t.String())
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *CreateType) UnmarshalJSON(b []byte) error {
	ins, err := ParseCreateType(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
