// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package verifycode

import (
	"bytes"
	"fmt"
	"strings"
)

var (
	enumNotifyTypeShowMap = map[NotifyType]string{
		NotifyTypeMail: "mail",
		NotifyTypeSMS:  "sms",
	}

	enumNotifyTypeIDMap = map[string]NotifyType{
		"mail": NotifyTypeMail,
		"sms":  NotifyTypeSMS,
	}
)

// ParseNotifyType Parse NotifyType from string
func ParseNotifyType(str string) (NotifyType, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := enumNotifyTypeIDMap[key]
	if !ok {
		return 0, fmt.Errorf("unknown Status: %s", str)
	}

	return v, nil
}

// Is todo
func (t NotifyType) Is(target NotifyType) bool {
	return t == target
}

// String stringer
func (t NotifyType) String() string {
	v, ok := enumNotifyTypeShowMap[t]
	if !ok {
		return "unknown"
	}

	return v
}

// MarshalJSON todo
func (t NotifyType) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(t.String())
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *NotifyType) UnmarshalJSON(b []byte) error {
	ins, err := ParseNotifyType(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

var (
	enumIssueTypeShowMap = map[IssueType]string{
		IssueTypePass:  "pass",
		IssueTypeToken: "token",
	}

	enumIssueTypeIDMap = map[string]IssueType{
		"pass":  IssueTypePass,
		"token": IssueTypeToken,
	}
)

// ParseIssueType Parse IssueType from string
func ParseIssueType(str string) (IssueType, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := enumIssueTypeIDMap[key]
	if !ok {
		return 0, fmt.Errorf("unknown Status: %s", str)
	}

	return v, nil
}

// Is todo
func (t IssueType) Is(target IssueType) bool {
	return t == target
}

// String stringer
func (t IssueType) String() string {
	v, ok := enumIssueTypeShowMap[t]
	if !ok {
		return "unknown"
	}

	return v
}

// MarshalJSON todo
func (t IssueType) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(t.String())
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *IssueType) UnmarshalJSON(b []byte) error {
	ins, err := ParseIssueType(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
