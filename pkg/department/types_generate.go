// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package department

import (
	"bytes"
	"fmt"
	"strings"
)

var (
	enumApplicationFormStatusShowMap = map[ApplicationFormStatus]string{
		Pending: "pending",
		Passed:  "passed",
		Deny:    "deny",
	}

	enumApplicationFormStatusIDMap = map[string]ApplicationFormStatus{
		"pending": Pending,
		"passed":  Passed,
		"deny":    Deny,
	}
)

// ParseApplicationFormStatus Parse ApplicationFormStatus from string
func ParseApplicationFormStatus(str string) (ApplicationFormStatus, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := enumApplicationFormStatusIDMap[key]
	if !ok {
		return 0, fmt.Errorf("unknown Status: %s", str)
	}

	return v, nil
}

// Is todo
func (t ApplicationFormStatus) Is(target ApplicationFormStatus) bool {
	return t == target
}

// String stringer
func (t ApplicationFormStatus) String() string {
	v, ok := enumApplicationFormStatusShowMap[t]
	if !ok {
		return "unknown"
	}

	return v
}

// MarshalJSON todo
func (t ApplicationFormStatus) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(t.String())
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *ApplicationFormStatus) UnmarshalJSON(b []byte) error {
	ins, err := ParseApplicationFormStatus(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
